// Copyright 2018 GRAIL, Inc. All rights reserved.
// Use of this source code is governed by the Apache-2.0
// license that can be found in the LICENSE file.

// This file was auto-generated by the vanadium vdl tool.
// Package: identity

// Package identity defines interfaces for Vanadium identity providers.
package identity

import (
	"v.io/v23"
	"v.io/v23/context"
	"v.io/v23/rpc"
	"v.io/v23/security"
	"v.io/v23/security/access"
	"v.io/v23/vdl"
)

var _ = __VDLInit() // Must be first; see __VDLInit comments for details.

//////////////////////////////////////////////////
// Interface definitions

// Ec2BlesserClientMethods is the client interface
// containing Ec2Blesser methods.
//
// Ec2Blesser returns a blessing given the provided EC2 instance identity
// document.
type Ec2BlesserClientMethods interface {
	// BlessEc2 uses the provided EC2 instance identity document in PKCS#7
	// format to return a blessing to the client.
	BlessEc2(_ *context.T, pkcs7b64 string, _ ...rpc.CallOpt) (blessing security.Blessings, _ error)
}

// Ec2BlesserClientStub adds universal methods to Ec2BlesserClientMethods.
type Ec2BlesserClientStub interface {
	Ec2BlesserClientMethods
	rpc.UniversalServiceMethods
}

// Ec2BlesserClient returns a client stub for Ec2Blesser.
func Ec2BlesserClient(name string) Ec2BlesserClientStub {
	return implEc2BlesserClientStub{name}
}

type implEc2BlesserClientStub struct {
	name string
}

func (c implEc2BlesserClientStub) BlessEc2(ctx *context.T, i0 string, opts ...rpc.CallOpt) (o0 security.Blessings, err error) {
	err = v23.GetClient(ctx).Call(ctx, c.name, "BlessEc2", []interface{}{i0}, []interface{}{&o0}, opts...)
	return
}

// Ec2BlesserServerMethods is the interface a server writer
// implements for Ec2Blesser.
//
// Ec2Blesser returns a blessing given the provided EC2 instance identity
// document.
type Ec2BlesserServerMethods interface {
	// BlessEc2 uses the provided EC2 instance identity document in PKCS#7
	// format to return a blessing to the client.
	BlessEc2(_ *context.T, _ rpc.ServerCall, pkcs7b64 string) (blessing security.Blessings, _ error)
}

// Ec2BlesserServerStubMethods is the server interface containing
// Ec2Blesser methods, as expected by rpc.Server.
// There is no difference between this interface and Ec2BlesserServerMethods
// since there are no streaming methods.
type Ec2BlesserServerStubMethods Ec2BlesserServerMethods

// Ec2BlesserServerStub adds universal methods to Ec2BlesserServerStubMethods.
type Ec2BlesserServerStub interface {
	Ec2BlesserServerStubMethods
	// Describe the Ec2Blesser interfaces.
	Describe__() []rpc.InterfaceDesc
}

// Ec2BlesserServer returns a server stub for Ec2Blesser.
// It converts an implementation of Ec2BlesserServerMethods into
// an object that may be used by rpc.Server.
func Ec2BlesserServer(impl Ec2BlesserServerMethods) Ec2BlesserServerStub {
	stub := implEc2BlesserServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := rpc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := rpc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implEc2BlesserServerStub struct {
	impl Ec2BlesserServerMethods
	gs   *rpc.GlobState
}

func (s implEc2BlesserServerStub) BlessEc2(ctx *context.T, call rpc.ServerCall, i0 string) (security.Blessings, error) {
	return s.impl.BlessEc2(ctx, call, i0)
}

func (s implEc2BlesserServerStub) Globber() *rpc.GlobState {
	return s.gs
}

func (s implEc2BlesserServerStub) Describe__() []rpc.InterfaceDesc {
	return []rpc.InterfaceDesc{Ec2BlesserDesc}
}

// Ec2BlesserDesc describes the Ec2Blesser interface.
var Ec2BlesserDesc rpc.InterfaceDesc = descEc2Blesser

// descEc2Blesser hides the desc to keep godoc clean.
var descEc2Blesser = rpc.InterfaceDesc{
	Name:    "Ec2Blesser",
	PkgPath: "github.com/grailbio/base/security/identity",
	Doc:     "// Ec2Blesser returns a blessing given the provided EC2 instance identity\n// document.",
	Methods: []rpc.MethodDesc{
		{
			Name: "BlessEc2",
			Doc:  "// BlessEc2 uses the provided EC2 instance identity document in PKCS#7\n// format to return a blessing to the client.",
			InArgs: []rpc.ArgDesc{
				{"pkcs7b64", ``}, // string
			},
			OutArgs: []rpc.ArgDesc{
				{"blessing", ``}, // security.Blessings
			},
			Tags: []*vdl.Value{vdl.ValueOf(access.Tag("Read"))},
		},
	},
}

// GoogleBlesserClientMethods is the client interface
// containing GoogleBlesser methods.
//
// GoogleBlesser returns a blessing giving the provided Google ID token.
type GoogleBlesserClientMethods interface {
	BlessGoogle(_ *context.T, idToken string, _ ...rpc.CallOpt) (blessing security.Blessings, _ error)
}

// GoogleBlesserClientStub adds universal methods to GoogleBlesserClientMethods.
type GoogleBlesserClientStub interface {
	GoogleBlesserClientMethods
	rpc.UniversalServiceMethods
}

// GoogleBlesserClient returns a client stub for GoogleBlesser.
func GoogleBlesserClient(name string) GoogleBlesserClientStub {
	return implGoogleBlesserClientStub{name}
}

type implGoogleBlesserClientStub struct {
	name string
}

func (c implGoogleBlesserClientStub) BlessGoogle(ctx *context.T, i0 string, opts ...rpc.CallOpt) (o0 security.Blessings, err error) {
	err = v23.GetClient(ctx).Call(ctx, c.name, "BlessGoogle", []interface{}{i0}, []interface{}{&o0}, opts...)
	return
}

// GoogleBlesserServerMethods is the interface a server writer
// implements for GoogleBlesser.
//
// GoogleBlesser returns a blessing giving the provided Google ID token.
type GoogleBlesserServerMethods interface {
	BlessGoogle(_ *context.T, _ rpc.ServerCall, idToken string) (blessing security.Blessings, _ error)
}

// GoogleBlesserServerStubMethods is the server interface containing
// GoogleBlesser methods, as expected by rpc.Server.
// There is no difference between this interface and GoogleBlesserServerMethods
// since there are no streaming methods.
type GoogleBlesserServerStubMethods GoogleBlesserServerMethods

// GoogleBlesserServerStub adds universal methods to GoogleBlesserServerStubMethods.
type GoogleBlesserServerStub interface {
	GoogleBlesserServerStubMethods
	// Describe the GoogleBlesser interfaces.
	Describe__() []rpc.InterfaceDesc
}

// GoogleBlesserServer returns a server stub for GoogleBlesser.
// It converts an implementation of GoogleBlesserServerMethods into
// an object that may be used by rpc.Server.
func GoogleBlesserServer(impl GoogleBlesserServerMethods) GoogleBlesserServerStub {
	stub := implGoogleBlesserServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := rpc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := rpc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implGoogleBlesserServerStub struct {
	impl GoogleBlesserServerMethods
	gs   *rpc.GlobState
}

func (s implGoogleBlesserServerStub) BlessGoogle(ctx *context.T, call rpc.ServerCall, i0 string) (security.Blessings, error) {
	return s.impl.BlessGoogle(ctx, call, i0)
}

func (s implGoogleBlesserServerStub) Globber() *rpc.GlobState {
	return s.gs
}

func (s implGoogleBlesserServerStub) Describe__() []rpc.InterfaceDesc {
	return []rpc.InterfaceDesc{GoogleBlesserDesc}
}

// GoogleBlesserDesc describes the GoogleBlesser interface.
var GoogleBlesserDesc rpc.InterfaceDesc = descGoogleBlesser

// descGoogleBlesser hides the desc to keep godoc clean.
var descGoogleBlesser = rpc.InterfaceDesc{
	Name:    "GoogleBlesser",
	PkgPath: "github.com/grailbio/base/security/identity",
	Doc:     "// GoogleBlesser returns a blessing giving the provided Google ID token.",
	Methods: []rpc.MethodDesc{
		{
			Name: "BlessGoogle",
			InArgs: []rpc.ArgDesc{
				{"idToken", ``}, // string
			},
			OutArgs: []rpc.ArgDesc{
				{"blessing", ``}, // security.Blessings
			},
			Tags: []*vdl.Value{vdl.ValueOf(access.Tag("Read"))},
		},
	},
}

var __VDLInitCalled bool

// __VDLInit performs vdl initialization.  It is safe to call multiple times.
// If you have an init ordering issue, just insert the following line verbatim
// into your source files in this package, right after the "package foo" clause:
//
//    var _ = __VDLInit()
//
// The purpose of this function is to ensure that vdl initialization occurs in
// the right order, and very early in the init sequence.  In particular, vdl
// registration and package variable initialization needs to occur before
// functions like vdl.TypeOf will work properly.
//
// This function returns a dummy value, so that it can be used to initialize the
// first var in the file, to take advantage of Go's defined init order.
func __VDLInit() struct{} {
	if __VDLInitCalled {
		return struct{}{}
	}
	__VDLInitCalled = true

	return struct{}{}
}
